"use strict";(self.webpackChunktailcall_run=self.webpackChunktailcall_run||[]).push([[3238],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||s;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const s={title:"Context",sidebar_position:3},i=void 0,o={unversionedId:"guides/context",id:"guides/context",title:"Context",description:"In any GraphQL framework, including Tailcall, Context is a fundamental mechanism used for data sharing amongst various parts of your application. It is an adaptable object that is made available to every resolver in GraphQL.",source:"@site/docs/guides/context.md",sourceDirName:"guides",slug:"/guides/context",permalink:"/docs/guides/context",draft:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/guides/context.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Context",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CLI",permalink:"/docs/guides/cli"},next:{title:"Tackling N + 1",permalink:"/docs/guides/n+1"}},l={},p=[{value:"Context in Tailcall",id:"context-in-tailcall",level:2},{value:"args",id:"args",level:3},{value:"value",id:"value",level:3},{value:"parent",id:"parent",level:3},{value:"env",id:"env",level:3},{value:"headers",id:"headers",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In any GraphQL framework, including Tailcall, ",(0,a.kt)("inlineCode",{parentName:"p"},"Context")," is a fundamental mechanism used for data sharing amongst various parts of your application. It is an adaptable object that is made available to every resolver in GraphQL."),(0,a.kt)("h2",{id:"context-in-tailcall"},"Context in Tailcall"),(0,a.kt)("p",null,"In Tailcall, as in all GraphQL implementations, Context is a variable that is accessible to every ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/operators"},"Operator"),". It is used to store and access data that needs to be shared between operators."),(0,a.kt)("p",null,"The Context can be described using the following Typescript interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Context {\n  args: Map<string, Json>\n  value: Json\n  parent: Context\n  env: Map<string, string>\n  headers: Map<string, string>\n}\n")),(0,a.kt)("h3",{id:"args"},"args"),(0,a.kt)("p",null,"These are the arguments passed to the current query. They can be used to access the arguments of the query. For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"showLineNumbers",showLineNumbers:!0},'type Query {\n  user(id: ID!): User @http(path: "/users/{{args.id}}")\n}\n')),(0,a.kt)("p",null,"In this example, ",(0,a.kt)("inlineCode",{parentName:"p"},"args.id")," is used to access the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," argument passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," query."),(0,a.kt)("h3",{id:"value"},"value"),(0,a.kt)("p",null,"This represents the value of the current node. For instance,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"showLineNumbers",showLineNumbers:!0},'type Post {\n  id: ID!\n  title: String!\n  body: String!\n  comments: [Comment] @http(path: "/posts/{{value.id}}/comments")\n}\n')),(0,a.kt)("p",null,"In the example above, ",(0,a.kt)("inlineCode",{parentName:"p"},"value.id")," is used to access the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," field of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," type."),(0,a.kt)("h3",{id:"parent"},"parent"),(0,a.kt)("p",null,"This denotes the context of the parent node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"showLineNumbers",showLineNumbers:!0},'type Query {\n  posts: [Post] @http(path: "/posts")\n}\ntype Post {\n  id: Int!\n  userId: Int!\n  title: String!\n  body: String!\n  user: User\n    @http(path: "/users", query: [{key: "id", value: "{{value.userId}}"}], matchPath: ["id"], matchKey: "userId")\n}\n')),(0,a.kt)("p",null,"In this case, ",(0,a.kt)("inlineCode",{parentName:"p"},"value.userId")," is a way to get the ",(0,a.kt)("inlineCode",{parentName:"p"},"userId"),' information from the "parent" context of the ',(0,a.kt)("inlineCode",{parentName:"p"},"Post"),' type. Essentially, it\'s extracting a list or "array" of ',(0,a.kt)("inlineCode",{parentName:"p"},"userId")," fields from multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," types. Think of ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," as a container that holds the results of a post query, with ",(0,a.kt)("inlineCode",{parentName:"p"},"userId")," being the specific key you want to fetch from that container."),(0,a.kt)("h3",{id:"env"},"env"),(0,a.kt)("p",null,"This represents global environment variables for the server. This is set once when the server starts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"showLineNumbers",showLineNumbers:!0},'type Query {\n  users: [User]! @http(baseUrl: "{{env.API_ENDPOINT}}", path: "/users")\n}\n')),(0,a.kt)("p",null,"In the above example, ",(0,a.kt)("inlineCode",{parentName:"p"},"env.API_ENDPOINT")," refers to an environment variable called API_ENDPOINT, which should be defined in your server settings."),(0,a.kt)("h3",{id:"headers"},"headers"),(0,a.kt)("p",null,"These are the headers of the request that was received by the Tailcall server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"showLineNumbers",showLineNumbers:!0},'type Query {\n  commentsForUser: [Comment] @http(path: "/users/{{headers.userId}}/comments")\n}\n')),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"headers.userId")," refers to a header called ",(0,a.kt)("inlineCode",{parentName:"p"},"userId")," that should be present in the ",(0,a.kt)("inlineCode",{parentName:"p"},"context"),". The server can use this ",(0,a.kt)("inlineCode",{parentName:"p"},"userId")," to fetch comments for the specified user."))}d.isMDXComponent=!0}}]);