"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7021],{6934:(e,i,l)=>{l.r(i),l.d(i,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var n=l(5893),a=l(1151);const t={title:"CLI",sidebar_position:3},s=void 0,o={id:"guides/cli",title:"CLI",description:"The TailCall CLI (Command Line Interface) is an essential part of the TailCall toolkit. It allows developers to manage and optimize GraphQL configurations directly from the command line. Each command within the CLI is designed to handle a specific aspect of GraphQL composition. Below, you'll find a detailed overview of each command, along with its options and usage examples.",source:"@site/docs/guides/cli.md",sourceDirName:"guides",slug:"/guides/cli",permalink:"/docs/guides/cli",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/guides/cli.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"CLI",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Operator Composition",permalink:"/docs/guides/operators/operator-composition"},next:{title:"Context",permalink:"/docs/guides/context"}},c={},h=[{value:"check",id:"check",level:2},{value:"--n-plus-one-queries",id:"--n-plus-one-queries",level:3},{value:"--schema",id:"--schema",level:3},{value:"--out",id:"--out",level:3},{value:"start",id:"start",level:2},{value:"init",id:"init",level:2}];function r(e){const i={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:"The TailCall CLI (Command Line Interface) is an essential part of the TailCall toolkit. It allows developers to manage and optimize GraphQL configurations directly from the command line. Each command within the CLI is designed to handle a specific aspect of GraphQL composition. Below, you'll find a detailed overview of each command, along with its options and usage examples."}),"\n",(0,n.jsx)(i.h2,{id:"check",children:"check"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"check"})," command validates a composition spec. Notably, this command can detect potential N+1 issues. To use the ",(0,n.jsx)(i.code,{children:"check"})," command, follow this format:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall check [options] <file>...\n"})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"check"})," command offers various options that control different settings, such as the display of the blueprint, endpoints, and schema of the composition spec."]}),"\n",(0,n.jsx)(i.h3,{id:"--n-plus-one-queries",children:"--n-plus-one-queries"}),"\n",(0,n.jsx)(i.p,{children:"This flag triggers the detection of N+1 issues."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Type: Boolean"}),"\n",(0,n.jsx)(i.li,{children:"Default: false"}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall check --n-plus-one-queries <file>...\n"})}),"\n",(0,n.jsx)(i.h3,{id:"--schema",children:"--schema"}),"\n",(0,n.jsx)(i.p,{children:"This option enables the display of the schema of the composition spec."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Type: Boolean"}),"\n",(0,n.jsx)(i.li,{children:"Default: false"}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall check --schema <file1> <file2> ... <fileN>\n"})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"check"})," command allows for multiple files. Specify each file path, separated by a space, after the options."]}),"\n",(0,n.jsx)(i.p,{children:"Example:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall check --schema ./path/to/file1.graphql ./path/to/file2.graphql\n"})}),"\n",(0,n.jsx)(i.h3,{id:"--out",children:"--out"}),"\n",(0,n.jsx)(i.p,{children:"This option writes the resulting schema of the composition spec to a file. The value of the option will become the name of the file."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Type: String"}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall check <file1> <file2> ... <fileN> --out <outfile>\n"})}),"\n",(0,n.jsxs)(i.p,{children:["The schema can be written either in ",(0,n.jsx)(i.code,{children:"json"}),", ",(0,n.jsx)(i.code,{children:"graphql"})," or ",(0,n.jsx)(i.code,{children:"yml"})," formats."]}),"\n",(0,n.jsx)(i.p,{children:"Example:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"# Output .graphql file\ntailcall check ./path/to/file1.graphql ./path/to/file2.graphql --out ./path/to/outfile.graphql\n\n# Output .json file\ntailcall check ./path/to/file1.graphql ./path/to/file2.graphql --out ./path/to/outfile.json\n"})}),"\n",(0,n.jsx)(i.h2,{id:"start",children:"start"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"start"})," command launches the TailCall Server, acting as an GraphQL proxy with specific configurations. The server can publish various GraphQL configurations."]}),"\n",(0,n.jsx)(i.p,{children:"To start the server, use the following command:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall start <file1> <file2> ... <fileN> <http_path1> <http_path2> .. <http_pathN>\n"})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"start"})," command allows for multiple files and supports loading configurations over HTTP. You can mix file system paths with HTTP paths. Specify each path, separated by a space, after the options."]}),"\n",(0,n.jsx)(i.p,{children:"Example:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall start ./path/to/file1.graphql ./path/to/file2.graphql http://example.com/file2.graphql\n"})}),"\n",(0,n.jsx)(i.h2,{id:"init",children:"init"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"init"})," command bootstraps a new TailCall project. It creates the necessary GraphQL schema files in the provided file path."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"tailcall init <file_path>\n"})}),"\n",(0,n.jsxs)(i.p,{children:["This command prompts for additional file creation and configuration, creating a ",(0,n.jsx)(i.code,{children:".tailcallrc.graphql"})," file by default."]})]})}function d(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},1151:(e,i,l)=>{l.d(i,{Z:()=>o,a:()=>s});var n=l(7294);const a={},t=n.createContext(a);function s(e){const i=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(t.Provider,{value:i},e.children)}}}]);