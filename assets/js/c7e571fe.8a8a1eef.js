"use strict";(self.webpackChunktailcall_run=self.webpackChunktailcall_run||[]).push([[261],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,m=c["".concat(s,".").concat(d)]||c[d]||h[d]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=n(7462),a=n(7294),o=n(3905),l=n(5608);const i={title:"Quick Start",sidebar_position:1,label:"Quick Start"},s=void 0,p={unversionedId:"intro/quickstart",id:"intro/quickstart",title:"Quick Start",description:"Installation",source:"@site/docs/intro/quickstart.mdx",sourceDirName:"intro",slug:"/intro/quickstart",permalink:"/docs/intro/quickstart",draft:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/intro/quickstart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Quick Start",sidebar_position:1,label:"Quick Start"},sidebar:"tutorialSidebar",next:{title:"Problem Statement",permalink:"/docs/"}},u={},c=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Launch",id:"launch",level:2},{value:"Run",id:"run",level:2}],h={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)(a.Fragment,null,"You can install the latest version - ",(0,o.kt)("b",null,l.A.yT),", by using",(0,o.kt)("b",null," homebrew"),"."),(0,o.kt)("p",null,"If you're interested in exploring other installation methods, refer to our ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/installation"},"installation\nguide")," for detailed instructions on other ways."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If you don't already have ",(0,o.kt)("strong",{parentName:"li"},"brew")," installed, you can find the instructions ",(0,o.kt)("a",{parentName:"li",href:"https://brew.sh/"},"here"),"."),(0,o.kt)("li",{parentName:"ol"},"Add the Tailcall repository to Homebrew by running the following command in your terminal:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"brew tap tailcallhq/tailcall\nbrew install tailcall\n"))),(0,o.kt)("li",{parentName:"ol"},"Verify that Tailcall is installed correctly by running:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"tc\n")))),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"For our first example, we are going to compose a GraphQL schema from the REST APIs at ",(0,o.kt)("a",{href:"https://jsonplaceholder.typicode.com",target:"_blank"},(0,o.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com"},"https://jsonplaceholder.typicode.com")),", a free online REST API with some fake data.\nWe will use the API at ",(0,o.kt)("inlineCode",{parentName:"p"},"/users")," to get a list of users, and ",(0,o.kt)("inlineCode",{parentName:"p"},"/users/:id/posts")," to get the posts for each user, and compose them into a single GraphQL schema."),(0,o.kt)("p",null,"Create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonplaceholder.graphql")," and paste the following contents into it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"showLineNumbers",showLineNumbers:!0},'# Specify a base url for all http requests\nschema @server(baseURL: "http://jsonplaceholder.typicode.com") {\n  query: Query\n}\n\ntype Query {\n  # Specify the http path for the users query\n  users: [User] @http(path: "/users")\n}\n\n# Create a user type with the fields returned by the users api\ntype User {\n  id: Int!\n  name: String!\n  username: String!\n  email: String!\n\n  # Extend the user type with the posts field\n  # Use the current user\'s id to construct the path\n  posts: [Post] @http(path: "/users/{{value.id}}/posts")\n}\n\n# Create a post type with the fields returned by the posts api\ntype Post {\n  id: Int!\n  title: String!\n  body: String!\n}\n')),(0,o.kt)("p",null,"The above file is a standard ",(0,o.kt)("inlineCode",{parentName:"p"},".graphQL")," file, with a few additions such as ",(0,o.kt)("inlineCode",{parentName:"p"},"@server")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@http")," directives. So basically we specify the GraphQL schema and how to resolve that GraphQL schema in the same file, without having to write any code! Here is a quick overview of what the above schema does:"),(0,o.kt)("h2",{id:"launch"},"Launch"),(0,o.kt)("p",null,"Now, run the following command to start the server with the full path to the ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonplaceholder.graphql")," file that you created above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"tc start ./jsonplaceholder.graphql\n")),(0,o.kt)("p",null,"If the command succeeds, you should see output like the following below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Endpoints:  2\nUnsafe:     0\nPlayground: http://localhost/graphql\nN + 1:      1\n")),(0,o.kt)("p",null,"The server starts with the schema provided and prints out a load of meta information. We will cover those in detail in a bit. For now, open the ",(0,o.kt)("strong",{parentName:"p"},"playground URL")," in a new tab in your browser and try it out for yourself!"),(0,o.kt)("h2",{id:"run"},"Run"),(0,o.kt)("p",null,"Let's try the following query, to get all the users and the title of each post of each user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"showLineNumbers",showLineNumbers:!0},"query {\n  users {\n    id\n    name\n    posts {\n      title\n    }\n  }\n}\n")),(0,o.kt)("p",null,"You should see output like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"showLineNumbers",showLineNumbers:!0},'{\n  "data": {\n    "users": [\n      {\n        "id": 1,\n        "name": "Leanne Graham",\n        "posts": [\n          {\n            "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"\n          },\n          ...\n        ]\n      },\n      {\n        "id": 2,\n        "name": "Ervin Howell",\n        "posts": [\n          {\n            "title": "et ea vero quia laudantium autem"\n          },\n          {\n            "title": "in quibusdam tempore odit est dolorem"\n          },\n          ...\n        ]\n      }\n    ]\n  }\n}\n')),(0,o.kt)("p",null,"You can now add additional fields, and compose more queries together!"))}m.isMDXComponent=!0},5608:e=>{e.exports=JSON.parse('{"A":{"yT":"v0.13.0"},"b":{"dG":83}}')}}]);